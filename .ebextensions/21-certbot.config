# Set up EFS first so that all of your servers sync the /etc/letsencrypt/ directory. This will also keep your certs safe when servers are terminated. See 20-efs.config.
# Putting the webroot inside of /etc/letsencrypt/ ensures that it is synced on EFS, and you should be able to request certificates with multiple servers behind a load balancer.

# For your initial cert, invoke certbot manually.
# Provision the Elastic Beanstalk app and make sure to also set up EFS in 20-efs.config.
# Then SSH to the EC2 instance and run:
#
# sudo su
# CERTBOT_EMAIL=your.email@gmail.com
# CERTBOT_DOMAIN=yourdomainhere.elasticbeanstalk.com
# certbot certonly --debug --non-interactive --agree-tos --keep-until-expiring --installer nginx --authenticator webroot --webroot-path /var/acme-challenges --email $CERTBOT_EMAIL --domains $CERTBOT_DOMAIN
# ln -sf $CERTBOT_DOMAIN /etc/letsencrypt/live/eb

# Once you have the cert and the symlink is set up, update nginx.conf to use it.

# packages:
#   yum:
#     python3-pip: []
#
# commands:
#   "01-certbot":
#     test: test ! -f /opt/certbot.done
#     command: |
#       pip3 install certbot
#       touch /opt/certbot.done
#
# files:
#   /opt/certbot-renew:
#     mode: "000755"
#     owner: root
#     group: root
#     content: |
#       #!/bin/bash -e
#       # Sleep randomly, up to 10 minutes, to make it less likely that two servers try to renew at the same time
#       sleep $(($RANDOM%600))
#       certbot renew --debug
#       # Reload the nginx configuration every time, since there may be multiple servers running. Using --renew-hook would only reload nginx on the server that made the renewal.
#       systemctl reload nginx.service
#
#   /etc/cron.d/certbot:
#     mode: "000644"
#     owner: root
#     group: root
#     content: |
#       @daily root /opt/certbot-renew
